/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.sharedtestproject.classicmodels.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.sharedtestproject.classicmodels.service.PaymentsService;
import org.springframework.web.bind.annotation.RequestBody;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.sharedtestproject.classicmodels.*;
import com.sharedtestproject.classicmodels.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Payments.
 * @see com.sharedtestproject.classicmodels.Payments
 */
@RestController(value = "Classicmodels.PaymentsController")
@RequestMapping("/classicmodels/Payments")
@Api(description = "Exposes APIs to work with Payments resource.", value = "PaymentsController")
public class PaymentsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PaymentsController.class);

    @Autowired
    @Qualifier("classicmodels.PaymentsService")
    private PaymentsService paymentsService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Payments instances matching the search criteria.")
    public Page<Payments> findPaymentss(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Paymentss list");
        return paymentsService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Payments instances.")
    public Page<Payments> getPaymentss(Pageable pageable) {
        LOGGER.debug("Rendering Paymentss list");
        return paymentsService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setPaymentsService(PaymentsService service) {
        this.paymentsService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Payments instance.")
    public Payments createPayments(@RequestBody Payments instance) {
        LOGGER.debug("Create Payments with information: {}", instance);
        instance = paymentsService.create(instance);
        LOGGER.debug("Created Payments with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Payments instance associated with the given composite-id.")
    public Payments getPayments(@RequestParam(value = "customerNumber", required = true) Integer customerNumber, @RequestParam(value = "checkNumber", required = true) String checkNumber) throws EntityNotFoundException {
        PaymentsId temp = new PaymentsId();
        temp.setCustomerNumber(customerNumber);
        temp.setCheckNumber(checkNumber);
        LOGGER.debug("Getting Payments with id: {}", temp);
        Payments instance = paymentsService.findById(temp);
        LOGGER.debug("Payments details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Payments instance associated with the given composite-id.")
    public Payments editPayments(@RequestParam(value = "customerNumber", required = true) Integer customerNumber, @RequestParam(value = "checkNumber", required = true) String checkNumber, @RequestBody Payments instance) throws EntityNotFoundException {
        PaymentsId temp = new PaymentsId();
        temp.setCustomerNumber(customerNumber);
        temp.setCheckNumber(checkNumber);
        paymentsService.delete(temp);
        instance = paymentsService.create(instance);
        LOGGER.debug("Payments details with id is updated: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Payments instance associated with the given composite-id.")
    public boolean deletePayments(@RequestParam(value = "customerNumber", required = true) Integer customerNumber, @RequestParam(value = "checkNumber", required = true) String checkNumber) throws EntityNotFoundException {
        PaymentsId temp = new PaymentsId();
        temp.setCustomerNumber(customerNumber);
        temp.setCheckNumber(checkNumber);
        LOGGER.debug("Deleting Payments with id: {}", temp);
        Payments deleted = paymentsService.delete(temp);
        return deleted != null;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Payments instances.")
    public Long countAllPaymentss() {
        LOGGER.debug("counting Paymentss");
        Long count = paymentsService.countAll();
        return count;
    }
}
