/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.sharedtestproject.classicmodels.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.sharedtestproject.classicmodels.service.OrderdetailsService;
import org.springframework.web.bind.annotation.RequestBody;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.sharedtestproject.classicmodels.*;
import com.sharedtestproject.classicmodels.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Orderdetails.
 * @see com.sharedtestproject.classicmodels.Orderdetails
 */
@RestController(value = "Classicmodels.OrderdetailsController")
@RequestMapping("/classicmodels/Orderdetails")
@Api(description = "Exposes APIs to work with Orderdetails resource.", value = "OrderdetailsController")
public class OrderdetailsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(OrderdetailsController.class);

    @Autowired
    @Qualifier("classicmodels.OrderdetailsService")
    private OrderdetailsService orderdetailsService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Orderdetails instances matching the search criteria.")
    public Page<Orderdetails> findOrderdetailss(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Orderdetailss list");
        return orderdetailsService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Orderdetails instances.")
    public Page<Orderdetails> getOrderdetailss(Pageable pageable) {
        LOGGER.debug("Rendering Orderdetailss list");
        return orderdetailsService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setOrderdetailsService(OrderdetailsService service) {
        this.orderdetailsService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Orderdetails instance.")
    public Orderdetails createOrderdetails(@RequestBody Orderdetails instance) {
        LOGGER.debug("Create Orderdetails with information: {}", instance);
        instance = orderdetailsService.create(instance);
        LOGGER.debug("Created Orderdetails with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Orderdetails instance associated with the given composite-id.")
    public Orderdetails getOrderdetails(@RequestParam(value = "orderNumber", required = true) Integer orderNumber, @RequestParam(value = "productCode", required = true) String productCode) throws EntityNotFoundException {
        OrderdetailsId temp = new OrderdetailsId();
        temp.setOrderNumber(orderNumber);
        temp.setProductCode(productCode);
        LOGGER.debug("Getting Orderdetails with id: {}", temp);
        Orderdetails instance = orderdetailsService.findById(temp);
        LOGGER.debug("Orderdetails details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Orderdetails instance associated with the given composite-id.")
    public Orderdetails editOrderdetails(@RequestParam(value = "orderNumber", required = true) Integer orderNumber, @RequestParam(value = "productCode", required = true) String productCode, @RequestBody Orderdetails instance) throws EntityNotFoundException {
        OrderdetailsId temp = new OrderdetailsId();
        temp.setOrderNumber(orderNumber);
        temp.setProductCode(productCode);
        orderdetailsService.delete(temp);
        instance = orderdetailsService.create(instance);
        LOGGER.debug("Orderdetails details with id is updated: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Orderdetails instance associated with the given composite-id.")
    public boolean deleteOrderdetails(@RequestParam(value = "orderNumber", required = true) Integer orderNumber, @RequestParam(value = "productCode", required = true) String productCode) throws EntityNotFoundException {
        OrderdetailsId temp = new OrderdetailsId();
        temp.setOrderNumber(orderNumber);
        temp.setProductCode(productCode);
        LOGGER.debug("Deleting Orderdetails with id: {}", temp);
        Orderdetails deleted = orderdetailsService.delete(temp);
        return deleted != null;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Orderdetails instances.")
    public Long countAllOrderdetailss() {
        LOGGER.debug("counting Orderdetailss");
        Long count = orderdetailsService.countAll();
        return count;
    }
}
