/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.sharedtestproject.classicmodels.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.sharedtestproject.classicmodels.service.OrderdetailsService;
import com.sharedtestproject.classicmodels.service.ProductsService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.sharedtestproject.classicmodels.*;
import com.sharedtestproject.classicmodels.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Products.
 * @see com.sharedtestproject.classicmodels.Products
 */
@RestController(value = "Classicmodels.ProductsController")
@RequestMapping("/classicmodels/Products")
@Api(description = "Exposes APIs to work with Products resource.", value = "ProductsController")
public class ProductsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProductsController.class);

    @Autowired
    @Qualifier("classicmodels.ProductsService")
    private ProductsService productsService;

    @Autowired
    @Qualifier("classicmodels.OrderdetailsService")
    private OrderdetailsService orderdetailsService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Products instances matching the search criteria.")
    public Page<Products> findProductss(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Productss list");
        return productsService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Products instances.")
    public Page<Products> getProductss(Pageable pageable) {
        LOGGER.debug("Rendering Productss list");
        return productsService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}/orderdetailses", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the orderdetailses instance associated with the given id.")
    public Page<Orderdetails> findAssociatedorderdetailses(Pageable pageable, @PathVariable("id") String id) {
        LOGGER.debug("Fetching all associated orderdetailses");
        return orderdetailsService.findAssociatedValues(id, "products", "productCode", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setProductsService(ProductsService service) {
        this.productsService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Products instance.")
    public Products createProducts(@RequestBody Products instance) {
        LOGGER.debug("Create Products with information: {}", instance);
        instance = productsService.create(instance);
        LOGGER.debug("Created Products with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Products instances.")
    public Long countAllProductss() {
        LOGGER.debug("counting Productss");
        Long count = productsService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Products instance associated with the given id.")
    public Products getProducts(@PathVariable(value = "id") String id) throws EntityNotFoundException {
        LOGGER.debug("Getting Products with id: {}", id);
        Products instance = productsService.findById(id);
        LOGGER.debug("Products details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Products instance associated with the given id.")
    public Products editProducts(@PathVariable(value = "id") String id, @RequestBody Products instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Products with id: {}", instance.getProductCode());
        instance.setProductCode(id);
        instance = productsService.update(instance);
        LOGGER.debug("Products details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Products instance associated with the given id.")
    public boolean deleteProducts(@PathVariable(value = "id") String id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Products with id: {}", id);
        Products deleted = productsService.delete(id);
        return deleted != null;
    }
}
