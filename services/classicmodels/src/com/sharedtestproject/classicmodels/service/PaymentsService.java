/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.sharedtestproject.classicmodels.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.sharedtestproject.classicmodels.*;

/**
 * Service object for domain model class Payments.
 * @see com.sharedtestproject.classicmodels.Payments
 */

public interface PaymentsService {
   /**
	 * Creates a new payments.
	 * 
	 * @param created
	 *            The information of the created payments.
	 * @return The created payments.
	 */
	public Payments create(Payments created);

	/**
	 * Deletes a payments.
	 * 
	 * @param paymentsId
	 *            The id of the deleted payments.
	 * @return The deleted payments.
	 * @throws EntityNotFoundException
	 *             if no payments is found with the given id.
	 */
	public Payments delete(PaymentsId paymentsId) throws EntityNotFoundException;

	/**
	 * Finds all paymentss.
	 * 
	 * @return A list of paymentss.
	 */
	public Page<Payments> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Payments> findAll(Pageable pageable);
	
	/**
	 * Finds payments by id.
	 * 
	 * @param id
	 *            The id of the wanted payments.
	 * @return The found payments. If no payments is found, this method returns
	 *         null.
	 */
	public Payments findById(PaymentsId id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a payments.
	 * 
	 * @param updated
	 *            The information of the updated payments.
	 * @return The updated payments.
	 * @throws EntityNotFoundException
	 *             if no payments is found with given id.
	 */
	public Payments update(Payments updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the paymentss in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the payments.
	 */

	public long countAll();


    public Page<Payments> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

