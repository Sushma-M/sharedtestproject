/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.sharedtestproject.classicmodels.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.sharedtestproject.classicmodels.*;

/**
 * Service object for domain model class ArticleTags.
 * @see com.sharedtestproject.classicmodels.ArticleTags
 */

public interface ArticleTagsService {
   /**
	 * Creates a new articletags.
	 * 
	 * @param created
	 *            The information of the created articletags.
	 * @return The created articletags.
	 */
	public ArticleTags create(ArticleTags created);

	/**
	 * Deletes a articletags.
	 * 
	 * @param articletagsId
	 *            The id of the deleted articletags.
	 * @return The deleted articletags.
	 * @throws EntityNotFoundException
	 *             if no articletags is found with the given id.
	 */
	public ArticleTags delete(ArticleTagsId articletagsId) throws EntityNotFoundException;

	/**
	 * Finds all articletagss.
	 * 
	 * @return A list of articletagss.
	 */
	public Page<ArticleTags> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<ArticleTags> findAll(Pageable pageable);
	
	/**
	 * Finds articletags by id.
	 * 
	 * @param id
	 *            The id of the wanted articletags.
	 * @return The found articletags. If no articletags is found, this method returns
	 *         null.
	 */
	public ArticleTags findById(ArticleTagsId id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a articletags.
	 * 
	 * @param updated
	 *            The information of the updated articletags.
	 * @return The updated articletags.
	 * @throws EntityNotFoundException
	 *             if no articletags is found with given id.
	 */
	public ArticleTags update(ArticleTags updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the articletagss in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the articletags.
	 */

	public long countAll();


    public Page<ArticleTags> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

